name: Build COSMOS MQTT Controller APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip openjdk-17-jdk wget curl \
          autoconf libtool pkg-config zlib1g-dev \
          libncurses5-dev libncursesw5-dev libtinfo5 \
          cmake libffi-dev libssl-dev build-essential \
          ccache ant gradle
    
    - name: Cache buildozer global directory
      uses: actions/cache@v3
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
    
    - name: Cache buildozer directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer[android] cython==0.29.36

    - name: Build APK with Buildozer
      env:
        ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        ANDROID_HOME: /usr/local/lib/android/sdk
      run: |
        export PATH=$PATH:~/.local/bin
        buildozer android debug
    
    - name: Sign APK (if release)
      if: github.event.inputs.release_type == 'release'
      run: |
        buildozer android release
    
    - name: Get APK name
      id: apk_name
      run: |
        APK_PATH=$(find bin -name "*.apk" | head -1)
        APK_NAME=$(basename "$APK_PATH")
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
        echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
        echo "Found APK: $APK_PATH"
        ls -la bin/
    
    - name: Upload APK as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: cosmos-mqtt-controller-apk
        path: bin/*.apk
        retention-days: 90
    
    - name: Create Release Tag
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      id: create_tag
      run: |
        TAG="v1.0.$(date +%Y%m%d)-${{ github.run_number }}"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Created tag: $TAG"
    
    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.create_tag.outputs.tag }}
        name: "COSMOS MQTT Controller ${{ steps.create_tag.outputs.tag }}"
        body: |
          ## 🚁 COSMOS MQTT Controller Android APK
          
          **Automated build from GitHub Actions**
          
          ### Features:
          - 📡 **MQTT Connection**: Connect to any MQTT broker
          - 🛑 **Brake Command**: Publishes "1" to `brakeCosmos` topic
          - 🛬 **Land Command**: Publishes "1" to `landCosmos` topic  
          - 🔊 **Volume Control**: Volume Up = Brake, Volume Down = Land
          - 🔄 **Background Mode**: Continues running when screen is off
          - 📊 **Real-time Status**: Connection and command monitoring
          - ⚙️ **Custom Credentials**: Enter your own MQTT broker details
          
          ### Installation:
          1. Download the APK file below
          2. Enable "Unknown Sources" in Android settings
          3. Install the APK on your device
          4. Enter your MQTT broker credentials
          5. Start controlling your COSMOS drone!
          
          ### MQTT Topics:
          - **Brake**: `brakeCosmos` (payload: "1")
          - **Land**: `landCosmos` (payload: "1")
          
          **Build Info:**
          - Commit: ${{ github.sha }}
          - Build Number: ${{ github.run_number }}
          - Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        files: |
          bin/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Comment PR with APK
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🎉 APK built successfully! Download it from the artifacts section above.'
          })
    
    - name: Build Summary
      run: |
        echo "## 🎉 Build Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 APK Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **File**: ${{ steps.apk_name.outputs.apk_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Size**: $(du -h ${{ steps.apk_name.outputs.apk_path }} | cut -f1)" >> $GITHUB_STEP_SUMMARY
        echo "- **Type**: ${{ github.event.inputs.release_type || 'debug' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Download Options:" >> $GITHUB_STEP_SUMMARY
        echo "1. **Artifacts**: Download from the artifacts section of this workflow run" >> $GITHUB_STEP_SUMMARY
        echo "2. **Releases**: Download from the [Releases page](../releases) (for main branch builds)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚁 Ready to control your COSMOS drone!" >> $GITHUB_STEP_SUMMARY
